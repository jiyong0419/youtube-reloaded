==========================================================================================

#1.3 What is Node JS

    브라우저에는 자바스크립트가 내장되어 있다.
    Ryan은 자바스크립트를 브라우저에서 자바스크립트를 꺼내어 Node JS를 만들었다.
    그리하여 브라우저가 아닌 환경에서도 자바스크립트를 사용할수 있다. 
    ex) VS의 콘솔

==========================================================================================

#1.4 What is NPM
    npm은 nodeJS와 패키지의 연결매체

==========================================================================================

#2.0 
    node JS 다운로드 >> npm init >> 정보입력 >> package.json 생성됨 >> index.js 생성
        
==========================================================================================

#2.1 
    package.json >> "scripts": { "server": "node server.js" }, (실행할 파일명을 적는 곳)
    npm i express >> express 설치 (nomde_modules폴더와 package-lock.json파일이 생김)

==========================================================================================

# 2.2
    npm i >> package.json의 "dependencies"를 보고 npm이 필요한 패키지를 알아서 설치해줌
    .gitignore 생성 >> /nomde_modules (node_modules폴더의 커밋을 무시)

==========================================================================================

#2.3
    바벨(babel)은 nodeJS가 최신문법을 이해할수 있게 해줌
    바벨 설치법 (#2.4에 이어서)

==========================================================================================

#2.4 
    노드몬(nodemon)설치법

==========================================================================================

#3.0
    express 임포트
    express 선언
    서버리슨함수 선언
    리스닝함수 선언

==========================================================================================

#3.1 
#3.2
    GET Request 개념
        server.get("/",Home)

==========================================================================================

#3.3    
    req, res argument 개념
        res.end() / res.send("Home")

==========================================================================================

#3.5 
#3.6
    미들웨어(MiddleWare) 개념
        server.use(logger)
    next argument 개념
        next()   
==========================================================================================

#3.11
    Morgan 미들웨어
        npm i morgan
    morgan 임포트
    morgan 선언

==========================================================================================

#4.0
    라우터 개념
    라우터는 url을 카테고리별로 분류해둔것이라 생각하면됨

==========================================================================================

#4.1
    라우터,컨트롤러 선언
    const globalRouter = express.Router()           >> 라우터 선언
    const home = () => {return res.send("Home")}    >> 컨트롤러 선언
    server.use("/",globalRouter)                    >> 라우터 설정
    globalRouter.get("/",home)                      >> 컨트롤러 설정

==========================================================================================

#4.2 
    라우터+컨트롤러를 따로 폴더로 구분
    export default globalRouter  >> globalRouter를 기본 export로 지정
    
==========================================================================================

#4.3
    라우터와 컨트롤러를 따로 폴더로 구분
    export default와 export의 차이

==========================================================================================

#4.7 
#4.8
    URL 파라미터 (URL parameter)
        videoRouter.get("/:id",see) >>  url에 :를 붙히는건 변수라는걸 express에게 알려주는것
    
    파라미터 정규식 (익스프레스 정규식)
        "/:id(\\d+)" >> 모든숫자로된 파라미터

==========================================================================================

#5.0 
#5.1 
    pug 템플릿 설명 및 다운
    npm i pug >> 뷰엔진설정 server.set("view engine","pug") >> views폴더 생성 >> 현재작업디렉토리설정( #5.2에서)

==========================================================================================

#5.2 
    현재작업디렉토리설정 server.set("views",process.cwd()+"/src/views")
    pug에서 변수사용 = #{}
    pug에서 partial 사용법 ( include )

==========================================================================================

#5.3 
    pug에서 block 설정
    pug에서 extends 사용

==========================================================================================

#5.4
    컨트롤러에서 pug로 변수 넘겨주는법
        res.render("home",{pageTitle:"Home"})

==========================================================================================

#5.6 
    MVP.css 사이트의 link를 base.pug의 head부분에 추가
        >> link(rel="stylesheet" href="https://unpkg.com/mvp.css")

==========================================================================================

#5.7 
    pug에서 h1 #{pageTitle} | Wetube  >> pageTitle변수가 텍스트랑 같이 쓰일때
    pug에서 h1=pageTitle >> pageTitle변수가 단독으로 쓰일때 

    pug에서 if문 if else문 사용법

==========================================================================================

#5.8
    pug에서 순환문(iteration) 사용법
        each video in videos
        else sorry nothing found.
         
==========================================================================================

#5.9 
    pug에서 mixins 개념 
        mixin은 데이터를 전달받을 수 있는 partial
        
==========================================================================================

#6.0
    pug의 태그의 속성안에서는 백틱문자를 사용할수있다

==========================================================================================

#6.1 
    pug에서 view관련 삼항조건문
    pug에서 relative url과 absolute url

==========================================================================================

#6.2
    pug에서 POST method
    post 컨트롤러 작성
==========================================================================================

#6.3
    route().get().post()
    post에 응답하기>>  req.body(form으로부터 post된 정보를 얻어오는법) 사용전 설정할것들 >> urlencoded 
    res.redirect(url) >> 컨트롤러 내에 모든 문이 끝나면 브라우저가 자동으로 url로 이동
    
==========================================================================================

#6.6
    배열에 요소추가 >> array.push()

==========================================================================================

#6.7
    몽고db 소개 (sql-base가아닌 document-base)
    몽고db 설치법 ( docs.mongodb.com/manual/)
    chocolatey 소개

==========================================================================================

#6.8 
    몽구스(mongoose)소개 (nodeJS와 mongoDB를 이어주는 다리역할)
    npm i mongoose
    db.js 생성 및 mongoose.connect("mongo url/db이름") 
        mongo url 확인법 : powershell >> mongod >> mongo (MongoDB shell version v5.3.2라고 떠야함) >> 
                          connecting to: mongodb://127.0.0.1:27017/?compressors=disabled~~~ >> mongodb~~27017까지가 url주소
    몽고db 명령어 : help , show dbs, exit, 
    db.js작성 (몽구스임포트,db연결성공/실패메시지출력)

==========================================================================================

#6.9 
    데이터 CRUD
    DB에 데이터 생성하기
    Video model 설명

==========================================================================================

#6.10
    Video model 작성
    스키마작성, 모델작성

==========================================================================================

#6.11
    init.js 생성 
    (server.js에는 express구성에관한 코드만 남기고 server실행코드는 init.js에 작성 굳이,,)
    Video model 사용법
        Video.find() 콜백활용법 (promise활용법이 더낫긴함)

==========================================================================================

#6.12
    컨트롤러에서 콜백함수를 이용해 Video model 사용하는법
        Video.find({},callbackFunc)

==========================================================================================
==========================================================================================
==========================================================================================
==========================================================================================
==========================================================================================
==========================================================================================
==========================================================================================
==========================================================================================
==========================================================================================
==========================================================================================
==========================================================================================
==========================================================================================
==========================================================================================
